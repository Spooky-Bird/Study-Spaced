@*
    **********************************************************************
    Project: ServerApp
    Folder: Pages
    Page: Profile

    Author: Simon Wunderlich

    Description: Page for user to control their account details including: Username
                                                                           Email
                                                                           Password
                                                                           Profile picture

    **********************************************************************
*@
@page "/profile"
@using ServerApp.Services;
@inject UserService userService
@inject FileService fileService
@inject NavigationManager NavManager
@inject User _currentUser

<script src="https://kit.fontawesome.com/5f2ea077c5.js" crossorigin="anonymous"></script>
<link href="https://fonts.googleapis.com/css2?family=Nunito+Sans" rel="stylesheet">
<NavBar></NavBar>
<div class="profile">
    <h1>Profile</h1>
    <ul>
        <li style="float: left;    margin-right: 2rem;margin-top: 24px;margin-left: 1rem;">

            <label for="file-upload" class="uploadImg" style="background-repeat: no-repeat; background-size: cover;     background-image: url(@_currentUser.pfpUrl);">
            </label>
            <InputFile style="display:none" OnChange="uploadImg" id="file-upload"><i class="fa-solid fa-user" style="color:#987acd; font-size:3rem;"></i></InputFile>
            <p style="color: red;display: block;width: 100px;font-size: 0.8rem;">@imgErrorMsg</p>
        </li>
        <li>
            <div style="float: left;margin-right: 2rem; margin-top: 10px;">
                <p>Username</p>
                <input type="text" style="width:200px" placeholder=@revertState.username @onchange="(ChangeEventArgs args) => {UserInput(args);}" maxlength="12" />
                <p style="margin-top: 0.7rem;">Email</p>
                <input type="email" style="width:250px; background-color:@emailError" placeholder=@revertState.email @onchange="(ChangeEventArgs args) => {EmailInput(args);}" @oninput="() => {emailError = ErrorState.Clear;}" maxlength="30" />
            </div>
            <div style="margin-top: 10px; float:left;">
                <p>Change Password</p>
                <input type="password" style="width:200px" @oninput="passChanged" @bind-value="@passInput"/>
                <p style="margin-top:0.7rem;">Confirm Password</p>
                <input type="password" style="width:200px; background-color:@passError" @oninput="passChanged" @onchange="(ChangeEventArgs args) => {passConfirm(args);}" />
            </div>
        </li>
    </ul>
    <button class="logIn" style="font-size: 1rem;margin-top: 218px;width: fit-content; padding:0.6rem; background-color:@saveColour; border-color:@saveColour" @onclick="updateUser">Save</button>
    <button class="signUp" style="font-size: 1rem;margin-top: 90px;width: fit-content;margin-right: 1rem; border-width:0.2rem; color:@saveColour; border-color:@saveColour" @onclick="Cancel">Cancel</button>
</div>

@code {
    UserModel revertState = new UserModel();
    string revertPfp = "";
    string fileName = "";
    string contentType = "";
    string passInput = "";
    string saveColour = "#a9b7b8";
    string emailError = ErrorState.Clear;
    string passError = ErrorState.Clear;
    string imgErrorMsg = "";

    //Sets ui element's colours (save, cancel) to active state
    void settingsChanged()
    {
        saveColour = "#987acd";
    }

    //Saves any changed information to database
    public void updateUser()
    {
        //Checks if any invalid inputs have been entered
        if (saveColour == "#a9b7b8" || emailError == ErrorState.Error || passError == ErrorState.Error)
            return;
        //Checks if password has been changed, if it has it applies it to the user object
        if(passInput != "")
            _currentUser.password = passInput;

        //Checks if a valid pfp has been entered and saved to file, if it has, it is uploaded to an s3 bucket
        if (fileName != "")
            fileService.savePfp($@"wwwroot\TempFiles\{_currentUser.userId}\pfp\" + fileName, fileName, contentType);

        //User object updated in db
        userService.store(_currentUser.Model());

        //Updates revert state so it will revert to updated state on cancel
        revertState = _currentUser.Model();

        //Greys out ui
        saveColour = "#a9b7b8";
    }

    //Event handler for when input entered in confirm password field
    //Run on each keypress
    public void passChanged(ChangeEventArgs args)
    {
        //clears errors on input
        passError = ErrorState.Clear;

        //sets save button to active state if password matches confirm password
        if(args.Value.ToString() == passInput)
        {
            settingsChanged();
        }
        else 
            saveColour = "#a9b7b8";
    }

    //Event handler for when text is entered into confirm password field
    //Runs on complete
    public void passConfirm(ChangeEventArgs args)
    {
        //Checks if passwords match
        if (args.Value.ToString() != passInput)
            passError = ErrorState.Error;
    }

    //Runs on startup
    //Defines revert states
    protected override async Task OnInitializedAsync()
    {
        //Checks if user has been loaded yet
        if (_currentUser.userId == "")
        {
            NavManager.NavigateTo("");
            return;
        }

        //Revert states are used to reset any changes the user makes if they click cancel or nav away
        revertState = _currentUser.Model();
        revertPfp = _currentUser.pfpUrl;

        //Creates event listener to cancel changes on nav away
        NavManager.LocationChanged += LocationChanged;
    }

    //Reverts any changed inputs on nav away
    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        //Checks if there are unsaved changes to revert
        if (saveColour != "#a9b7b8")
            Cancel();
        //Unsubscribes from event
        NavManager.LocationChanged -= LocationChanged;
    }

    //Reverts user's changes
    public void Cancel()
    {
        //Reverts all input variables to basic states
        saveColour = "#a9b7b8";
        imgErrorMsg = "";
        //Deletes temporary pfps
        if(fileName != "")
            File.Delete($@"wwwroot\TempFiles\{_currentUser.userId}\pfp\{fileName}");

        //Revert changes on user object
        _currentUser.Generate(revertState);
        _currentUser.pfpUrl = revertPfp;
        fileName = "";
        contentType = "";
    }

    //Event handler when file uploaded
    public async void uploadImg(InputFileChangeEventArgs args ) {
        //List of valid image types
        string[] validFileTypes = { "png", "jpg", "jpeg", "webp", "gif", "svg", "tiff",  };
        try
        {
            var file = args.File;
            //checks if file name contains an invalid file type
            if (!validFileTypes.Contains(file.Name.Split(".")[^1]))
            {
                imgErrorMsg = "Please enter valid image file";
                return;
            }
            else if (file.Size > 10000000)
            {
                imgErrorMsg = "Please enter a file < 10mb";
                return;
            }
            else
            {
                imgErrorMsg = "";
            }
            //creates path to store file
            var path = $@"wwwroot\TempFiles\{_currentUser.userId}\pfp\" + file.Name;

            //Creates containing directory
            Directory.CreateDirectory($@"wwwroot\TempFiles\{_currentUser.userId}\pfp\");

            //Saves pfp to path
            FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
            await file.OpenReadStream(long.MaxValue).CopyToAsync(filestream);
            filestream.Close();

            //Updates user pfp to user object
            _currentUser.pfpUrl = $@"'/TempFiles/{_currentUser.userId}/pfp/" + file.Name + "'";
            fileName = file.Name;
            contentType = file.ContentType;
            settingsChanged();
            StateHasChanged();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    //Event handler for when email entered
    public void EmailInput(ChangeEventArgs e) {
        //Determines if the input would be a valid
        //Only checks syntax, not if someone actually own the email
        if (IsValidEmail(e.Value.ToString()))
        {
            //Updates email files
            _currentUser.email = e.Value.ToString();
            settingsChanged(); 
        }
        //If user has entered something, and it is invalid, throw error
        else if (e.Value.ToString().Length > 0)
            emailError = ErrorState.Error;
    }

    //Checks if email is valid
    bool IsValidEmail(string email)
    {
        var emaiyl = new System.ComponentModel.DataAnnotations.EmailAddressAttribute();
        return emaiyl.IsValid(email);
    }

    //Event handler when username changed
    public void UserInput(ChangeEventArgs e)
    {
        //checks if input has been entered, if not, throw error
        if (e.Value.ToString().Length > 0)
        {
            _currentUser.username = e.Value.ToString();
            settingsChanged();
        }
        else
        {
            saveColour = "#a9b7b8";
            _currentUser.username = revertState.username;
        }
    }
}